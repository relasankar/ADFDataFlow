{
	"name": "dataflow",
	"properties": {
		"sources": [
			{
				"dataset": {
					"referenceName": "AzureSqlTable1",
					"type": "DatasetReference"
				},
				"name": "source1",
				"script": "source(output(\n\t\tAddressID as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source1"
			},
			{
				"dataset": {
					"referenceName": "AzureSqlTable2",
					"type": "DatasetReference"
				},
				"name": "source2",
				"script": "source(output(\n\t\tAddressID as integer,\n\t\tAddressLine1 as string,\n\t\tAddressLine2 as string,\n\t\tCity as string,\n\t\tStateProvince as string,\n\t\tCountryRegion as string,\n\t\tPostalCode as string,\n\t\trowguid as string,\n\t\tModifiedDate as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false) ~> source2"
			}
		],
		"sinks": [
			{
				"dataset": {
					"referenceName": "AzureSqlTable2",
					"type": "DatasetReference"
				},
				"name": "sink1",
				"script": "ConditionalSplit1@NoMatchedRows sink(mapColumn(\n\t\tAddressID = ConditionalSplit1@AddressID,\n\t\tAddressLine1 = ConditionalSplit1@AddressLine1,\n\t\tAddressLine2 = ConditionalSplit1@AddressLine2,\n\t\tCity = ConditionalSplit1@City,\n\t\tStateProvince = ConditionalSplit1@StateProvince,\n\t\tCountryRegion = ConditionalSplit1@CountryRegion,\n\t\tPostalCode = ConditionalSplit1@PostalCode,\n\t\trowguid = ConditionalSplit1@rowguid,\n\t\tModifiedDate = ConditionalSplit1@ModifiedDate\n\t),\n\tsaveMode:'overwrite') ~> sink1"
			}
		],
		"transformations": [
			{
				"name": "Lookup1",
				"script": "source1, source2 lookup(source1@AddressID == source2@AddressID,\n\tbroadcast: 'none')~> Lookup1"
			},
			{
				"name": "ConditionalSplit1",
				"script": "Lookup1 split(source2@AddressID!=source1@AddressID,\n\tdisjoint: false) ~> ConditionalSplit1@(NoMatchedRows, MatchedRows)"
			}
		]
	}
}